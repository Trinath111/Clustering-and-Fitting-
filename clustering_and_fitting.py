# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3Nh8EBvItAA91pg_AngyKvJogl6v9sH
"""

"""
This is the template file for the clustering and fitting assignment.
You will be expected to complete all the sections and
make this a fully working, documented file.
You should NOT change any function, file or variable names,
if they are given to you here.
Make use of the functions presented in the lectures
and ensure your code is PEP-8 compliant, including docstrings.
Fitting should be done with only 1 target variable and 1 feature variable,
likewise, clustering should be done with only 2 variables.
"""
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import scipy.stats as ss
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler


def plot_relational_plot(df):
    """Generate a clearer step plot using a reduced dataset."""
    df_sample = df[["Male_LE", "Female_LE"]].dropna().sample(100, random_state=42).sort_values("Male_LE")
    fig, ax = plt.subplots()
    sns.lineplot(data=df_sample, x="Male_LE", y="Female_LE", drawstyle="steps-post", marker="o", ax=ax)
    ax.set_title("Step Plot: Male vs Female Life Expectancy (Sample)")
    ax.set_xlabel("Male Life Expectancy")
    ax.set_ylabel("Female Life Expectancy")
    plt.tight_layout()
    plt.savefig("relational_plot.png")
    return


def plot_categorical_plot(df):
    """Generate a histogram of Combined Life Expectancy."""
    fig, ax = plt.subplots()
    sns.histplot(df["Both_LE"], bins=20, kde=True, color="skyblue", ax=ax)
    ax.set_title("Histogram: Combined Life Expectancy Distribution")
    ax.set_xlabel("Life Expectancy (Both Sexes)")
    ax.set_ylabel("Frequency")
    plt.tight_layout()
    plt.savefig("categorical_plot.png")
    return


def plot_statistical_plot(df):
    """Generate a violin plot of Male, Female, and Both LE distributions."""
    df_melted = df.melt(id_vars="Country",
                        value_vars=["Male_LE", "Female_LE", "Both_LE"],
                        var_name="Gender", value_name="LifeExpectancy")
    fig, ax = plt.subplots()
    sns.violinplot(data=df_melted, x="Gender", y="LifeExpectancy", palette="Set2", ax=ax)
    ax.set_title("Violin Plot: Life Expectancy Distributions")
    ax.set_xlabel("Gender Category")
    ax.set_ylabel("Life Expectancy")
    plt.tight_layout()
    plt.savefig("statistical_plot.png")
    return


def statistical_analysis(df, col: str):
    """Calculate mean, standard deviation, skewness, and kurtosis."""
    series = df[col].dropna()
    mean = series.mean()
    stddev = series.std()
    skew = ss.skew(series)
    excess_kurtosis = ss.kurtosis(series)
    return mean, stddev, skew, excess_kurtosis


def preprocessing(df):
    """Preprocess dataset by renaming and computing GenderGap."""
    if 'Unnamed: 0' in df.columns:
        df = df.drop(columns=['Unnamed: 0'])
    df.columns = ["Country", "Female_LE", "Both_LE", "Male_LE"]
    df["GenderGap"] = abs(df["Female_LE"] - df["Male_LE"])
    for col in df.select_dtypes(include='object').columns:
        df[col] = pd.Categorical(df[col]).codes
    print(df.head())
    print(df.describe())
    print(df.corr())
    return df


def writing(moments, col):
    """Display summary of four statistical moments."""
    print(f'For the attribute {col}:')
    print(f'Mean = {moments[0]:.2f}, '
          f'Standard Deviation = {moments[1]:.2f}, '
          f'Skewness = {moments[2]:.2f}, '
          f'Excess Kurtosis = {moments[3]:.2f}.')

    if abs(moments[2]) < 0.5:
        skewness_desc = 'not skewed'
    elif moments[2] > 0:
        skewness_desc = 'right skewed'
    else:
        skewness_desc = 'left skewed'

    if moments[3] < 0:
        kurtosis_desc = 'platykurtic'
    elif moments[3] > 0:
        kurtosis_desc = 'leptokurtic'
    else:
        kurtosis_desc = 'mesokurtic'

    print(f'The data was {skewness_desc} and {kurtosis_desc}.')
    return


def perform_clustering(df, col1, col2):
    """Perform KMeans clustering with GenderGap vs Both_LE."""

    def plot_elbow_method(data):
        inertia = []
        for k in range(1, 7):
            km = KMeans(n_clusters=k, random_state=42, n_init=10)
            km.fit(data)
            inertia.append(km.inertia_)
        fig, ax = plt.subplots()
        ax.plot(range(1, 7), inertia, marker='o')
        ax.set_title("Elbow Plot: Gender Gap vs Life Expectancy")
        ax.set_xlabel("Number of Clusters")
        ax.set_ylabel("Inertia")
        plt.tight_layout()
        plt.savefig("elbow_plot.png")
        return

    data = df[[col1, col2]].dropna()
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(data)

    plot_elbow_method(scaled_data)
    kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
    kmeans.fit(scaled_data)
    labels = kmeans.labels_
    centers = scaler.inverse_transform(kmeans.cluster_centers_)
    return labels, data, data[col1], data[col2], centers


def plot_clustered_data(labels, data, xkmeans, ykmeans, cenlabels):
    """Plot clustering results for GenderGap vs Both_LE."""
    fig, ax = plt.subplots()
    sns.scatterplot(x=xkmeans, y=ykmeans, hue=labels, palette="Set2", ax=ax)
    ax.scatter(cenlabels[:, 0], cenlabels[:, 1], c="black", s=100, marker="X", label="Centers")
    ax.set_title("KMeans Clustering: Gender Gap vs Life Expectancy")
    ax.set_xlabel("Gender Gap (|Female - Male|)")
    ax.set_ylabel("Combined Life Expectancy")
    ax.legend()
    plt.tight_layout()
    plt.savefig("clustering.png")
    return


def perform_fitting(df, col1, col2):
    """Fit linear regression to Female_LE and Male_LE."""
    data = df[[col1, col2]].dropna().sample(100, random_state=42)
    x = data[[col1]]
    y = data[[col2]]
    model = LinearRegression().fit(x, y)
    y_pred = model.predict(x)
    return data, x, y_pred


def plot_fitted_data(data, x, y):
    """Plot regression of Female_LE → Male_LE with zoomed axis."""
    fig, ax = plt.subplots()
    residuals = data['Male_LE'].values - y.flatten()
    sns.regplot(
        x=data['Female_LE'],
        y=data['Male_LE'],
        scatter_kws={'alpha': 0.4, 'label': 'Actual Data'},
        line_kws={'color': 'red', 'label': 'Fitted Line'},
        ax=ax
    )
    ax.errorbar(
        data['Female_LE'],
        y.flatten(),
        yerr=residuals.std(),
        fmt='o',
        alpha=0.05,
        color='gray',
        label='Error Bars'
    )
    ax.set_ylim(50, 90)
    ax.set_title("Fitting: Female LE → Male LE")
    ax.set_xlabel("Female Life Expectancy")
    ax.set_ylabel("Male Life Expectancy")
    ax.legend()
    plt.tight_layout()
    plt.savefig("fitting.png")
    return


def main():
    df = pd.read_csv("data.csv")
    df = preprocessing(df)
    col = "Both_LE"
    plot_relational_plot(df)
    plot_categorical_plot(df)
    plot_statistical_plot(df)
    moments = statistical_analysis(df, col)
    writing(moments, col)
    clustering_results = perform_clustering(df, "GenderGap", "Both_LE")
    plot_clustered_data(*clustering_results)
    fitting_results = perform_fitting(df, "Female_LE", "Male_LE")
    plot_fitted_data(*fitting_results)
    return


if __name__ == "__main__":
    main()